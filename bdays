import datetime

# we don't expect anyone older than this
beginning_of_time = 1099



def isLeapYear(year):
    if year%4 == 0:
        #'regular' leap years
        if year%100 != 0:
            return True
        # 3 of 4 'centurial' years are an exception
        # https://www.quora.com/Why-are-years-such-as-1700-1800-1900-not-leap-years-even-though-they-are-divisible-by-4-but-1600-and-2000-are
        else:
            return year%400 == 0
    else:
        return False

################### ORIGINAL ###################
def days_since_beginning_of_time(year, month, day):
    assert (beginning_of_time<year), "Please adjust the beginning of time"
    days = 0
    # full years
    for y in range(year - beginning_of_time):
        if isLeapYear(y + beginning_of_time):
            days += 366
        else:
            days += 365
        #print("current year: ", y + beginning_of_time, "leap: ", is_leap_year(y + beginning_of_time), "; days: ", days)
    # full months
    for m in range(month - 1):
        if m+1 in (1, 3, 5, 7, 8, 10, 12):
            days += 31
        elif m+1 in (4, 6, 9, 11):
            days += 30
        elif m+1 == 2:
            if isLeapYear(year):
                days += 29
            else:
                days += 28
    # finally days
    days += day-1

    return days

def days_between_dates_orig(y1, m1, d1, y2, m2, d2):
    if datetime.datetime(y1, m1, d1) > datetime.datetime(y2, m2, d2):
        raise ValueError('date 2 must be later than date 1')
    delta = days_since_beginning_of_time(y2, m2, d2) - days_since_beginning_of_time(y1, m1, d1)
    return delta


################### UDACITY ###################

def daysInMonth(year, m):
    if m in (1, 3, 5, 7, 8, 10, 12):
        return 31
    elif m in (4, 6, 9, 11):
        return 30
    elif m == 2:
        if isLeapYear(year):
            return 29
        else:
            return 28

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < daysInMonth(year, month):
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1


def dateIsBefore(year1, month1, day1, year2, month2, day2):
    """Returns True if year1-month1-day1 is before year2-month2-day2. Otherwise, returns False."""
    if year1 < year2:
        return True
    if year1 == year2:
        if month1 < month2:
            return True
        if month1 == month2:
            return day1 < day2
    return False


def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    # program defensively! Add an assertion if the input is not valid!
    assert dateIsBefore(year1, month1, day1, year2, month2, day2)
    days = 0
    while dateIsBefore(year1, month1, day1, year2, month2, day2):
        year1, month1, day1 = nextDay(year1, month1, day1)
        days += 1
    return days

################### TESTS ###################

def tst_leap():
    print("1980 is leap? ",isLeapYear(1980))
    print("1985 is leap? ",isLeapYear(1985))
    print("1900 is leap? ",isLeapYear(1900))
    print("1600 is leap? ",isLeapYear(1600))
    print("2000 is leap? ",isLeapYear(2000))

def tst1_orig():
    dt_birth = datetime.datetime(year=1100, month=2, day=1)
    dt_today = datetime.datetime(year=1999, month=3, day=1)
    print("Birth: ",dt_birth)
    print("Today: ",dt_today)
    print("The true num of days: ", dt_today-dt_birth)
    delta1 = days_since_beginning_of_time(dt_today.year, dt_today.month, dt_today.day) - days_since_beginning_of_time(dt_birth.year, dt_birth.month, dt_birth.day)
    print("And our self-calculated num of days (original): ", delta1)
    delta2 = daysBetweenDates(dt_birth.year, dt_birth.month, dt_birth.day, dt_today.year, dt_today.month, dt_today.day)
    print("And our self-calculated num of days (udacity): ", delta2)


def tst2_orig():
    print(days_between_dates(2012, 6, 29, 2013, 6, 31))


def tst_udacity():
    print("in tst_u")
    test_cases = [((2012, 1, 1, 2012, 2, 28), 58),
                  ((2012, 1, 1, 2012, 3, 1), 60),
                  ((2011, 6, 30, 2012, 6, 30), 366),
                  ((2011, 1, 1, 2012, 8, 8), 585),
                  ((1900, 1, 1, 1999, 12, 31), 36523)]
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        print ("args=", args,"result=", result)
        if result != answer:
            print( "Test with data:", args, "failed")
        else:
            print ("Test case passed!")



tst1_orig()
